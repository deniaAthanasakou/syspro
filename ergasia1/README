Ονοματεπώνυμο: 	Αντωνία Αθανασάκου
ΑΜ:				1115201400004

Εργασία 1η Προγραμματισμός Συστημάτων

	
	Αρχεία Πηγαίου Κώδικα και Σχεδιαστικές Επιλογές

main.c	
	Στη συνάρτηση main, παίρνω ως ορίσματα το όνομα του αρχείου εισόδου και προαιρετικά τον μέγιστο αριθμό εμφάνισης αποτελεσμάτων. Στη συνέχεια ελέγχω αυτά τα ορίσματα και αν δεν είναι ορθά, εμφανίζω μήνυμα λάθους και τερματίζεται το πρόγραμμα.
	Δημιουργώ ένα δείκτη σε μια δομή Map και στον πίνακα αυτής της δομής εισάγω δομές MapNode που αποτελούνται από το id του κειμένου, το ίδιο το κείμενο και τον αριθμό των λέξεων που περιλαμβάνει. Αρχικά το μέγεθος του πίνακα είναι 5 και κάθε φορά που απαιτείται, το μέγεθος διπλασιάζεται.
	Έπειτα δημιουργώ και αρχικοποιώ τη δομή containsTrie με βάση τις λέξεις που υπάρχουν στα στοιχεία του πίνακα της δομής Map. Η δομή containsTrie περιλαμβάνει τον αριθμό των λέξεω του Trie, καθώς και έναν δείκτη στον πρώτο κόμβο του Trie. Κάθε κόμβος Trie περιλαμβάνει ένα χαρακτήρα, ένα δείκτη σε επόμενο γράμμα (παιδί - verticalNext), ένα δείκτη σε γράμμα ίδιου επιπέδου(αδερφός - horizontalNext), καθώς και ένα δείκτη σε postingList, ο οποίος είναι NULL για κάθε γράμμα της λέξης, εκτός του τελικού.
	Στη συνέχεια δέχομαι τις εντολές του χρήστη και καλώ τις αντίστοιχες συναρτήσεις. Αν ο χρήστης πληκτρολογήσει λάθος εντολή, δεν λαμβάνεται καμία ενέργεια. Για τις εντολές /search, /tf, /df και /exit είναι δυνατή και ισοδύναμη η πληκτρολόγηση των εντολών \search, \tf, \df και \exit αντίστοιχα. Στο τέλος της main καταστρέφω τις δομές Map και containsTrie.

query.c
	Σε αυτό το αρχείο βρίσκονται οι συναρτήσεις που καλούνται από τις εντολές /search, /tf και /df. 
	Η συνάρτηση search, δέχεται ως παραμέτρους μια δομή arrayWords (περιέχει τις λέξεις προς αναζήτηση), τις δομές Map και ContainsTrie, καθώς και τον μέγιστο αριθμό εμφάνισης αποτελεσμάτων. Αν καμία λέξη δεν δόθηκε για αναζήτηση, η συνάρτηση επιστρέφει, ενώ αν δόθηκαν παραπάνω από 10 λέξεις, μόνο οι πρώτες 10 χρησιμοποιούνται για αναζήτηση. Για κάθε λέξη, την αναζητώ στο ContainsTrie και αν υπάρχει υπολογίζω γι' αυτήν το idf της (χρησιμοποιήσα λογάριθμο με βάση 10) και το εισαγάγω σε μια δομή idfForWords. Δημιουργώ επίσης μια δομή DifferentIds που περιέχει έναν πίνακα με τα διαφορετικά ids των κειμένων στα οποία συμπεριλαμβάνεται έστω μία από τις λέξεις για αναζήτηση. Για κάθε κείμενο του οποίου το id βρίσκεται στον πίνακα της δομής DifferentIds, υπολογίζω το score του και εισαγάγω σε μια δομή PrintForSearch τα στοιχεία που θα πρέπει να εκτυπωθούν στη συνέχεια, ταξινομημένα με βάση το score. Στη συνέχεια εκτυπώνω τα topK αποτελέσματα με τη συνάρτηση printKResultsDESC.
	Η συνάρτηση printKResultsDESC εκτυπώνει για κάθε κείμενο έναν αύξοντα αριθμο (μέχρι τετραψήφιο), το id του κειμένου (μέχρι τετραψήφιο), το score του (μέχρι τριψήφιο με 4 δεκαδικά ψηφία) και στη συνέχεια το ίδιο το κείμενο με υπογραμμισμένες τις λέξεις για αναζήτηση. Εάν το αποτέλεσμα εκτυπώνεται στο STDOUT, χρησιμοποιείται η συνάρτηση ioctl() για τον υπολογισμό του μήκους της γραμμής του τερματικού, ενώ αν εκτυπώνεται σε αρχείο, χρησιμοποιείται η τιμή "136". Πριν εκτυπωσω τους χαρακτήρες μιας λέξης, ελέγχω αν αυτή θα χωράει να εισαχθεί ολόκληρη στην ίδια γραμμή, και αν όχι την εκτυπώνω στην παρακάτω γραμμη. Εισάγω επίσης σε μια δομή Underline την αρχή και το τέλος της λέξης που πρέπει να υπογραμμιστεί από κάτω. 
	Η συνάρτηση documentFrequency αν κληθεί με μία ή περισσότερες λέξεις εκτυπώνει τον αριθμό των αρχείων στα οποία κάθε λέξη υπάρχει. Αντιθέτως, αν κληθεί χωρίς λέξεις, βρίσκει όλες τις λέξεις που υπάρχουν στο containsTrie και εκτυπώνει για την καθεμία τον αριθμό των αρχείων στα οποία υπάρχει.
	Η συνάρτηση termFrequency αν κληθεί με παραμέτρους διαφορετικές από ενα μη αρνητικό id και μια λέξη, επιστρέφει χωρίς να τελέσει καμία λειτουργία. Αλλιώς βρίσκει αν αυτή η λέξη υπάρχει στο containsTrie και επιστρέφει τον αριθμό των εμφανίσεων της στο αρχείο με το δοσμένο id.


	Μεταγλώττιση/Εκτέλεση
Για την μεταγλώττιση των αρχείων πηγαίου κώδικα, δημιούργησα ένα αρχείο Makefile. Συνεπώς με την εντολή make, το αρχείο μεταγλωττίζεται.
Όσο αφορά την εκτέλεση του προγράμματος, χρείαζεται η εντολή ./minisearch -i docfile -k K.
Το κομμάτι -k K είναι προαιρετικό και σε περίπτωση που δεν δοθεί τιμή από τον χρήστη, παίρνει την τιμή K = 10.

	Αποτελέσματα
Από ότι είδα, τα αποτελέσματα της εφαρμογής βγαίνουν σωστά για τα δοσμένα datasets και workloads. Υπάρχουν κάποιες διαφορές όμως, για τις κλήσεις των search queries, αφού ακολούθησα το format της εκφώνησης και εμφάνισα και τον αύξοντα αριθμό αποτελεσμάτων. Επίσης τα scores δεν είναι ακριβώς ίδια με τα δοσμένα.
Έτρεξα επίσης το πρόγραμμά μου με valgrind --leak-check=full και δεν εμφάνισε κανένα λάθος ή memory leak.